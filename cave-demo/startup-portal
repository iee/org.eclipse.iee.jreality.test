#!/bin/bash

JR=/central/home/ptldemo/steffen_testws/jreality
ARGS="-Xms256M -Xmx396M -Djava.library.path=$JR/jni/linux64 -Djreality.jogl.quadBufferedStereo=true"

ssh left DISPLAY=:0.0 java -Djreality.config=$JR/cave-demo/portal.left $ARGS -jar $JR/lib/smrj-client.jar tcp 4444 &
ssh center DISPLAY=:0.0 java -Djreality.config=$JR/cave-demo/portal.center $ARGS -jar $JR/lib/smrj-client.jar tcp 4444 &
ssh right DISPLAY=:0.0 java -Djreality.config=$JR/cave-demo/portal.right $ARGS -jar $JR/lib/smrj-client.jar tcp 4444 &

#
# Version 1: usually slower...
#
# Here one app runs on master and synchronizes its scene graph to the other machines
#
# run JRViewer or tutorials with the following vm arguments:
#
# -Dde.jreality.scene.Viewer=de.jreality.portal.PortalServerViewer
# -Dde.jreality.viewerapp.env=portal
# -Dde.jreality.portal.localViewer=de.jreality.jogl.Viewer
# -Dde.jreality.scene.tool.Config=portal
# -Dde.smrj.clients="left center right"
# -Dde.smrj.clients.port=4444
#

#
# Version 2: usually faster, but sometimes apps drift out of sync
#
# Here the app runs on each machine, only trackd data is sent to them from master
#
# add the following java arguments to the client commands:
# ARGS=$ARGS" -Dde.jreality.viewerapp.env=portal-remote -Dde.jreality.scene.tool.Config=portal-remote -Dde.jreality.ui.viewerapp.autoRender=false -Dde.jreality.ui.viewerapp.synchRender=false"
#
# then, to run an application (say, de.jreality.tutorial.geom.Cube06), run in eclipse
# the class de.jreality.portal.MasterApplication with Program arguments
#
# de.jreality.tutorial.geom.Cube06
#
# As vm arguments, one only needs
#
# -Dde.smrj.clients="left center right"
# -Dde.smrj.clients.port=4444
#
# Other parameters are not required, but libTrackdAPI needs to be in the java.library.path
#